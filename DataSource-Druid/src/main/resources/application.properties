# 应用程序名称
spring.application.name=example

# 是否开启调试日志
debug=false

# datasource config
spring.datasource.url=jdbc:h2:mem:school;MODE=MySQL;
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.schema=classpath:sql/*.sql
spring.datasource.initialization-mode=always
spring.datasource.platform=h2
# 配置初始化大小、最大、最小
spring.datasource.druid.initial-size=1
spring.datasource.druid.max-active=20
spring.datasource.druid.min-idle=1
# 配置获取连接等待超时的时间
spring.datasource.druid.max-wait=60000
# 是否缓存preparedStatement，也就是PSCache
spring.datasource.druid.pool-prepared-statements=true
# 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=20
# 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true
spring.datasource.druid.max-open-prepared-statements=20
# 用来检测连接是否有效的sql，要求是一个查询语句，常用select 1
spring.datasource.druid.validation-query=select 1
# 单位：秒，检测连接是否有效的超时时间
#spring.datasource.druid.validation-query-timeout=1
# 申请连接时执行validationQuery检测连接是否有效，配置会降低性能
spring.datasource.druid.test-on-borrow=false
# 归还连接时执行validationQuery检测连接是否有效，配置会降低性能
spring.datasource.druid.test-on-return=false
# 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效
spring.datasource.druid.test-while-idle=true
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.time-between-eviction-runs-millis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.druid.min-evictable-idle-time-millis=300000
spring.datasource.druid.max-evictable-idle-time-millis=900000
# 配置监控统计拦截的filters
spring.datasource.druid.filters=stat
